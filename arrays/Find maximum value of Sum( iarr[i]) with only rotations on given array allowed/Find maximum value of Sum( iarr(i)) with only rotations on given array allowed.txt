Here I will be discussing the most efficient approach to this problem.
--------------------------------------------------------------------------------

1. When the array is rotated in RIGHT order(clockwise Rotate)
a=[3,4,5,6,1,2] ----------------->[2,3,4,5,6,1] ----------------->[1,2,3,4,5,6]
               (1 right rotation)               (2 right rotation)
We need to print the MAXIMUM value of sum(i*a[i]) so the equations will be as follows
n --> length of the array
for rotation = 0
sum_0 = 0*a[0] + 1*a[1] + 2*a[2] + ... + (n-2)*a[n-2] + (n-1)*a[n-1]

for rotation = 1
sum_1 = 0*a[n-1] + 1*a[0] + 2*a[1] + .... + (n-2)*a[n-3] + (n-1)*a[n-2]

for rotation = 2
sum_2 = 0*a[n-2] + 1*a[n-1] + 2*a[0] + .... + (n-2)*a[n-4] + (n-1)*a[n-3]

=>  sum_1 - sum_0 = 0*a[n-1] + 1*a[0] + 2*a[1] + .... + (n-2)*a[n-3] + (n-1)*a[n-2] - (0*a[0] + 1*a[1] + 2*a[2] + ...
                                                                                   + (n-2)*a[n-2] + (n-1)*a[n-1])

=>                = (1-n)*a[n-1] + (a[0] + a[1] + a[2] + ... + a[n-2])

=>                = (a[0] + a[1] + ... + a[n-2] + a[n-1]) - n*a[n-1]

=> sum_1 = sum_0 + (a[0] + a[1] + ... + a[n-2] + a[n-1]) - n*a[n-1]       ------------------------(equation 1)


=>  sum_2 - sum_1 = 0*a[n-2] + 1*a[n-1] + 2*a[0] + .... + (n-2)*a[n-4] + (n-1)*a[n-3] - (0*a[n-1] + 1*a[0] + 2*a[1] + ....
                                                                                       + (n-2)*a[n-3] + (n-1)*a[n-2]))

=>                = (1-n)a[n-2] + a[n-1] + a[0] + a[1] + a[2] + ... + a[n-3]

=>                = -n*a[n-2] + (a[0] + a[1] + a[2] + ... + a[n-3] + a[n-2] + a[n-1])

=> sum_2 = sum_1 + (a[0] + a[1] + ... + a[n-2] + a[n-1]) - n*a[n-2]       ------------------------(equation 2)

from equation 1&2 sum_i th for rotation = i will be
=> sum_i = sum_(i-1) + summation of all elements in the array(a[0] + a[1] + ... + a[n-2] + a[n-1]) -n*a[n-i]

2. When the array is rotated in LEFT order(anti-clockwise Rotate)
a=[3,4,5,6,1,2] ----------------->[4,5,6,1,2,3] ----------------->[5,6,1,2,3,4]
               (1 right rotation)               (2 right rotation)

for rotation = 0
sum_0 = 0*a[0] + 1*a[1] + 2*a[2] + ... + (n-2)*a[n-2] + (n-1)*a[n-1]

for rotation = 1
sum_1 = 0*a[1] + 1*a[2] + 2*a[3] + ... + (n-2)*a[n-1] + (n-1)*a[0]

for rotation = 2
sum_2 = 0*a[2] + 1*a[3] + 2*a[4] + ... + (n-2)*a[0] + (n-1)*a[1]

=>  sum_1 - sum_0 = 0*a[1] + 1*a[2] + 2*a[3] + ... + (n-2)*a[n-1] + (n-1)*a[0] -(0*a[0] + 1*a[1] + 2*a[2] + ...
                                                                             + (n-2)*a[n-2] + (n-1)*a[n-1])
=> ... few steps later

=>  sum_1 - sum_0 = -summation of all elements in the array(a[0] + a[1] + ... + a[n-2] + a[n-1]) + n*a[0]

=>  sum_1 = sum_0 -summation of all elements in the array(a[0] + a[1] + ... + a[n-2] + a[n-1]) + n*a[0]         ------------------------(equation 1)

=>  sum_2 - sum_1 = 0*a[2] + 1*a[3] + 2*a[4] + ... + (n-2)*a[0] + (n-1)*a[1] -(0*a[1] + 1*a[2] + 2*a[3] + ...
                                                                             + (n-2)*a[n-1] + (n-1)*a[0])

=> ... few steps later

=>  sum_2 - sum_1 = -summation of all elements in the array(a[0] + a[1] + ... + a[n-2] + a[n-1]) + n*a[1]

=>  sum_2 = sum_1 -summation of all elements in the array(a[0] + a[1] + ... + a[n-2] + a[n-1]) + n*a[1]         ------------------------(equation 2)

from equation 1&2 sum_i th for rotation = i will be
=> sum_i = sum_(i-1) - summation of all elements in the array(a[0] + a[1] + ... + a[n-2] + a[n-1]) + n*a[i-1]

The Max Value for both these rotations will be same, except the sequence formula

Complexity analysis:

    Time Complexity: O(n).
    Since one loop is needed from 0 to n to check all rotations and the sum of the present rotation is calculated from the previous rotations in O(1) time).
    Auxiliary Space: O(1).
    As no extra space is required to so the space complexity will be O(1)

